# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_env:
    steps:
      - run:
          name: destroy stack
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}

jobs:
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: simulate error
          command: |
            return 1
      - destroy_env
          when: on_fail
#      - run:
#          name: install curl
#          command: apk add --update curl
#
#      - run:
#          name: test server
#          command:
#            if [curl -s --head "https://google.com"]; then echo "It worked!" else echo "It failed" fi

#
#  create_infra:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - run: aws cloudformation deploy --template-file template.yml --stack-name udacity
#
#  configure_infra:
#    docker:
#      - image: python:3.7-alpine3.11
#    steps:
#      - checkout
#      - add_ssh_keys:
#          fingerprints: [57:94:65:02:b2:9e:0a:7e:70:52:03:21:c7:ac:f0:28]
#      - run:
#          name: Install dependencies
#          command: apk add --update ansible
#      - run:
#          name: Install aws cli
#          command: pip install awscli
#      - run:
#          name: create empty file inventory
#          command: echo "[all]" > inventory
#      - run:
#          name: Get servers IP
#          command: aws ec2 describe-instances \
#            --query 'Reservations[*].Instances[*].PublicIpAddress' \
#            --output text >> inventory
#      - run:
#          name:
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ]; then
#              ansible-playbook -i inventory playbook.yml
#            fi

workflows:
  default:
    jobs:
      - smoke_test
#  # Name the workflow "welcome"
#  infra:
#    # Run the welcome/run job in its own container
#    jobs:
##      - create_infra
#      - configure_infra:
#          requires:
#            - create_infra
